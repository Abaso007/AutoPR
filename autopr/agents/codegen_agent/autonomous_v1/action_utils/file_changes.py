import json

import pydantic

from autopr.agents.codegen_agent.autonomous_v1.action_utils.context import ContextFile, ContextCodeHunk
from autopr.models.artifacts import Issue
from autopr.models.prompt_chains import PromptChain
from autopr.models.prompt_rails import PromptRail

from autopr.models.rail_objects import RailObject, PullRequestDescription, CommitPlan
from autopr.repos.completions_repo import CompletionsRepo
from langchain import PromptTemplate, OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.llms import BaseLLM, OpenAIChat
from langchain.prompts import ChatPromptTemplate, HumanMessagePromptTemplate
from langchain.schema import BaseOutputParser


# class GeneratedCodeLine(RailObject):
#     """
#     A line of code that has been generated by the codegen agent.
#     Contains a granular representation of the line of code, for lesser ambiguity.
#     This representation is very token-heavy, but may increase accuracy.
#     TODO try this if a normal string doesn't work well
#     """
#     output_spec = """<integer
#     name="line_num"
#     description="The line number of the line of code."
#     format="positive"
#     required="true"
#     on-fail="noop"
# />
# <integer
#     name="indent"
#     description="The number of space characters used for indentation."
#     required="true"
# />
# <string
#     name="content"
#     description="Content of the code line, stripped of leading whitespace."
#     required="true"
#     format="no-leading-whitespace"
#     on-fail-no-leading-whitespace="fix"
# />"""
#
#     line_num: int
#     indent: int
#     content: str
#
#     def __str__(self):
#         return self.indent * " " + self.content
#
#
# class GeneratedFileHunk(RailObject):
#     """
#     A hunk of code that has been generated by the codegen agent, as a list of lines with metadata.
#     """
#     output_spec = f"""<list
#     name="lines"
#     description="The lines of code in the hunk."
#     required="true"
# >
# <object>
# {GeneratedCodeLine.output_spec}
# </object>
# </list>
# <string
#     name="outcome"
#     description="A description of the outcome of the attempt to rewrite the file hunk according to the problem statement."
#     required="true"
# />"""
#
#     lines: list[GeneratedCodeLine]
#     outcome: str
#
#     @property
#     def contents(self) -> str:
#         if not self.lines:
#             return ""
#         start_line = self.lines[0].line_num
#         end_line = self.lines[-1].line_num
#         line_copy = self.lines[:]
#         result_lines = []
#         for line_num in range(start_line, end_line + 1):
#             if line_num == line_copy[0].line_num:
#                 result_lines.append(str(line_copy.pop(0)))
#             else:
#                 result_lines.append("")
#         return "\n".join(result_lines)
#
#
# class CreateFileHunk(PromptRail):
#     # two_step = False
#     output_type = GeneratedFileHunk
#     prompt_spec = f"""Hey, we've got a new file to create.
#
# This is the issue that was opened:
# ```{{issue}}```
#
# This is the pull request we're creating:
# ```{{pull_request_description}}```
#
# This is the commit we're writing:
# ```{{commit}}```
#
# This is the codebase subset we decided to look at:
# ```{{context_hunks}}```
#
# This is the plan for the file we're creating:
# ```{{plan}}```
#
# Please send me the contents of the file."""
#
#     issue: Issue
#     pull_request_description: PullRequestDescription
#     commit: CommitPlan
#     context_hunks: list[ContextFile]
#     plan: str
#
#
#
# class RewriteCodeHunk(PromptRail):
#     # two_step = False
#     output_type = GeneratedFileHunk
#     prompt_spec = f"""Hey, we've got a new code hunk to diff.
#
# This is the issue that was opened:
# ```{{issue}}```
#
# This is the pull request we're creating:
# ```{{pull_request_description}}```
#
# This is the commit we're writing:
# ```{{commit}}```
#
# This is the codebase subset we decided to look at:
# ```{{context_hunks}}```
#
# This is the hunk we're rewriting:
# ```{{hunk_contents}}```
#
# This is the plan for how we want to rewrite the hunk:
# ```{{plan}}```
#
# Please rewrite the hunk to match the plan, and evaluate how well you did."""
#
#     issue: Issue
#     pull_request_description: PullRequestDescription
#     commit: CommitPlan
#     context_hunks: list[ContextFile]
#     hunk_contents: str
#     plan: str


class GeneratedFileHunk(pydantic.BaseModel):
    contents: str
    outcome: str


class GeneratedHunkOutputParser(BaseOutputParser):
    def parse(self, output: str) -> GeneratedFileHunk:
        output_lines = output.split("\n")

        # Filter through the output until the first ``` is found
        while not output_lines[0].startswith("```"):
            output_lines.pop(0)
        output_lines.pop(0)

        # Until the next ``` is found, keep adding lines
        lines = []
        while not output_lines[0].startswith("```"):
            line = output_lines.pop(0)
            lines.append(line)
        output_lines.pop(0)
        code = "\n".join(lines)

        # The next lines should be the JSON
        try:
            outcome = json.loads("\n".join(output_lines))["outcome"]
        except json.JSONDecodeError:
            outcome = ""
        return GeneratedFileHunk(
            contents=code,
            outcome=outcome,
        )

    def get_format_instructions(self) -> str:
        return """RESPONSE FORMAT INSTRUCTIONS
----------------------------

When responding to me, please use the following format. Make sure you return both the code enclosed in backticks and the JSON immediately after.

```
<string>
```
{
    "outcome": string  # A description of the outcome of the attempt to rewrite the file hunk according to the problem statement.
}
"""


class NewFileChain(PromptChain):
    output_parser = GeneratedHunkOutputParser
    prompt_template = f"""Hey, we've got a new file to create.

This is the issue that was opened:
```
{{issue}}
```

This is the pull request we're creating:
```
{{pull_request_description}}
```

This is the commit we're writing:
```
{{commit}}
```

This is the codebase subset we decided to look at:
```
{{context_hunks}}
```

This is the plan for the file we're creating:
```
{{plan}}
```

Please send me the contents of the file.

{{format_instructions}}"""

    issue: Issue
    pull_request_description: PullRequestDescription
    commit: CommitPlan
    context_hunks: list[ContextFile]
    plan: str


class RewriteCodeHunkChain(PromptChain):
    output_parser = GeneratedHunkOutputParser
    prompt_template = f"""Hey, we've got a new code hunk to diff.
    
This is the issue that was opened:
```
{{issue}}
```
    
This is the pull request we're creating:
```
{{pull_request_description}}
```
    
This is the commit we're writing:
```
{{commit}}
```
    
This is the codebase subset we decided to look at:
```
{{context_hunks}}
```
    
This is the hunk we're rewriting:
```
{{hunk_contents}}
```
    
This is the plan for how we want to rewrite the hunk:
```
{{plan}}
```
    
Please rewrite the hunk to match the plan, but do not include any lines prefixed with | in the result. Preserve the correct leading indentation of the lines.

RULES:
- ONLY rewrite the lines prefixed with *, 
- submit only the lines without the * prefix,
- preserve the correct leading indentation of the lines.
    
{{format_instructions}}"""

    issue: Issue
    pull_request_description: PullRequestDescription
    commit: CommitPlan
    context_hunks: list[ContextFile]
    hunk_contents: ContextCodeHunk
    plan: str
